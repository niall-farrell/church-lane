input AddToBaisOnDaysBaisInput {
  eatingOnDaysDaysId: ID!
  eatingBaisId: ID!
  clientMutationId: String!
}

type AddToBaisOnDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  eatingBais: Bais
  eatingOnDaysDays: Days
  eatingBaisEdge: BaisEdge
  eatingOnDaysDaysEdge: DaysEdge
}

input AddToDaysOnBaisDaysInput {
  cookingBaisId: ID!
  cookingOnDaysDaysId: ID!
  clientMutationId: String!
}

type AddToDaysOnBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  cookingOnDaysDays: Days
  cookingBais: Bais
  cookingOnDaysDaysEdge: DaysEdge
  cookingBaisEdge: BaisEdge
}

type Bais implements Node {
  cookingOnDays(filter: DaysFilter): Days
  createdAt: DateTime!
  eatingOnDays(filter: DaysFilter, orderBy: DaysOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): DaysConnection
  id: ID!
  name: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type BaisConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BaisEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input BaiscookingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [BaiscookingOnDaysDayscookingBais!]
  eatingIds: [ID!]
  eating: [BaiscookingOnDaysDayseatingBais!]
}

input BaiscookingOnDaysDayscookingBais {
  name: String!
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiscookingOnDaysDayscookingBaiseatingOnDaysDays!]
}

input BaiscookingOnDaysDayscookingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  eatingIds: [ID!]
}

input BaiscookingOnDaysDayseatingBais {
  name: String!
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiscookingOnDaysDayseatingBaiseatingOnDaysDays!]
}

input BaiscookingOnDaysDayseatingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  eatingIds: [ID!]
}

input BaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [BaiseatingOnDaysDayscookingBais!]
  eatingIds: [ID!]
  eating: [BaiseatingOnDaysDayseatingBais!]
}

input BaiseatingOnDaysDayscookingBais {
  name: String!
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDayscookingBaiseatingOnDaysDays!]
}

input BaiseatingOnDaysDayscookingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  eatingIds: [ID!]
}

input BaiseatingOnDaysDayseatingBais {
  name: String!
  cookingOnDaysId: ID
  cookingOnDays: BaiseatingOnDaysDayseatingBaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDayseatingBaiseatingOnDaysDays!]
}

input BaiseatingOnDaysDayseatingBaiscookingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  eatingIds: [ID!]
}

input BaiseatingOnDaysDayseatingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  eatingIds: [ID!]
}

# An edge in a connection.
type BaisEdge {
  # The item at the end of the edge.
  node: Bais!

  # A cursor for use in pagination.
  cursor: String!
}

input BaisFilter {
  # Logical AND on all given filters.
  AND: [BaisFilter!]

  # Logical OR on all given filters.
  OR: [BaisFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  cookingOnDays: DaysFilter
  eatingOnDays_every: DaysFilter
  eatingOnDays_some: DaysFilter
  eatingOnDays_none: DaysFilter
}

enum BaisOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

input CreateBais {
  name: String!
  cookingOnDaysId: ID
  cookingOnDays: BaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDays!]
}

input CreateBaisInput {
  name: String!
  cookingOnDaysId: ID
  cookingOnDays: BaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDays!]
  clientMutationId: String!
}

type CreateBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  bais: Bais
  edge: BaisEdge
  cookingOnDays: Days
}

input CreateDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [DayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBais!]
}

input CreateDaysInput {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [DayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBais!]
  clientMutationId: String!
}

type CreateDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  days: Days
  edge: DaysEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreatePost {
  description: String!
  imageUrl: String!
}

input CreatePostInput {
  description: String!
  imageUrl: String!
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

type Days implements Node {
  cooking(filter: BaisFilter, orderBy: BaisOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BaisConnection
  createdAt: DateTime!
  date: DateTime!
  eating(filter: BaisFilter, orderBy: BaisOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BaisConnection
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type DaysConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DaysEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input DayscookingBais {
  name: String!
  eatingOnDaysIds: [ID!]
  eatingOnDays: [DayscookingBaiseatingOnDaysDays!]
}

input DayscookingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [DayscookingBaiseatingOnDaysDayscookingBais!]
  eatingIds: [ID!]
  eating: [DayscookingBaiseatingOnDaysDayseatingBais!]
}

input DayscookingBaiseatingOnDaysDayscookingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

input DayscookingBaiseatingOnDaysDayseatingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

input DayseatingBais {
  name: String!
  cookingOnDaysId: ID
  cookingOnDays: DayseatingBaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [DayseatingBaiseatingOnDaysDays!]
}

input DayseatingBaiscookingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [DayseatingBaiscookingOnDaysDayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBaiscookingOnDaysDayseatingBais!]
}

input DayseatingBaiscookingOnDaysDayscookingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

input DayseatingBaiscookingOnDaysDayseatingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

input DayseatingBaiseatingOnDaysDays {
  date: DateTime!
  cookingIds: [ID!]
  cooking: [DayseatingBaiseatingOnDaysDayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBaiseatingOnDaysDayseatingBais!]
}

input DayseatingBaiseatingOnDaysDayscookingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

input DayseatingBaiseatingOnDaysDayseatingBais {
  name: String!
  cookingOnDaysId: ID
  eatingOnDaysIds: [ID!]
}

# An edge in a connection.
type DaysEdge {
  # The item at the end of the edge.
  node: Days!

  # A cursor for use in pagination.
  cursor: String!
}

input DaysFilter {
  # Logical AND on all given filters.
  AND: [DaysFilter!]

  # Logical OR on all given filters.
  OR: [DaysFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: DateTime

  # All values that are not equal to given value.
  date_not: DateTime

  # All values that are contained in given list.
  date_in: [DateTime!]

  # All values that are not contained in given list.
  date_not_in: [DateTime!]

  # All values less than the given value.
  date_lt: DateTime

  # All values less than or equal the given value.
  date_lte: DateTime

  # All values greater than the given value.
  date_gt: DateTime

  # All values greater than or equal the given value.
  date_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  cooking_every: BaisFilter
  cooking_some: BaisFilter
  cooking_none: BaisFilter
  eating_every: BaisFilter
  eating_some: BaisFilter
  eating_none: BaisFilter
}

enum DaysOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DeleteBaisInput {
  id: ID!
  clientMutationId: String!
}

type DeleteBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  bais: Bais
  edge: BaisEdge
  cookingOnDays: Days
  deletedId: ID
}

input DeleteDaysInput {
  id: ID!
  clientMutationId: String!
}

type DeleteDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  days: Days
  edge: DaysEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeletePostInput {
  id: ID!
  clientMutationId: String!
}

type DeletePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createBais(input: CreateBaisInput!): CreateBaisPayload
  createDays(input: CreateDaysInput!): CreateDaysPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updateBais(input: UpdateBaisInput!): UpdateBaisPayload
  updateDays(input: UpdateDaysInput!): UpdateDaysPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateBais(input: UpdateOrCreateBaisInput!): UpdateOrCreateBaisPayload
  updateOrCreateDays(input: UpdateOrCreateDaysInput!): UpdateOrCreateDaysPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreatePost(input: UpdateOrCreatePostInput!): UpdateOrCreatePostPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteBais(input: DeleteBaisInput!): DeleteBaisPayload
  deleteDays(input: DeleteDaysInput!): DeleteDaysPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToBaisOnDays(input: AddToBaisOnDaysBaisInput!): AddToBaisOnDaysPayload
  addToDaysOnBais(input: AddToDaysOnBaisDaysInput!): AddToDaysOnBaisPayload
  removeFromBaisOnDays(input: RemoveFromBaisOnDaysBaisInput!): RemoveFromBaisOnDaysPayload
  removeFromDaysOnBais(input: RemoveFromDaysOnBaisDaysInput!): RemoveFromDaysOnBaisPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  createdAt: DateTime!
  description: String!
  id: ID!
  imageUrl: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge.
  node: Post!

  # A cursor for use in pagination.
  cursor: String!
}

input PostFilter {
  # Logical AND on all given filters.
  AND: [PostFilter!]

  # Logical OR on all given filters.
  OR: [PostFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  imageUrl: String

  # All values that are not equal to given value.
  imageUrl_not: String

  # All values that are contained in given list.
  imageUrl_in: [String!]

  # All values that are not contained in given list.
  imageUrl_not_in: [String!]

  # All values less than the given value.
  imageUrl_lt: String

  # All values less than or equal the given value.
  imageUrl_lte: String

  # All values greater than the given value.
  imageUrl_gt: String

  # All values greater than or equal the given value.
  imageUrl_gte: String

  # All values containing the given string.
  imageUrl_contains: String

  # All values not containing the given string.
  imageUrl_not_contains: String

  # All values starting with the given string.
  imageUrl_starts_with: String

  # All values not starting with the given string.
  imageUrl_not_starts_with: String

  # All values ending with the given string.
  imageUrl_ends_with: String

  # All values not ending with the given string.
  imageUrl_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum PostOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromBaisOnDaysBaisInput {
  eatingOnDaysDaysId: ID!
  eatingBaisId: ID!
  clientMutationId: String!
}

type RemoveFromBaisOnDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  eatingBais: Bais
  eatingOnDaysDays: Days
  eatingBaisEdge: BaisEdge
  eatingOnDaysDaysEdge: DaysEdge
}

input RemoveFromDaysOnBaisDaysInput {
  cookingBaisId: ID!
  cookingOnDaysDaysId: ID!
  clientMutationId: String!
}

type RemoveFromDaysOnBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  cookingOnDaysDays: Days
  cookingBais: Bais
  cookingOnDaysDaysEdge: DaysEdge
  cookingBaisEdge: BaisEdge
}

input SignupUserInput {
  clientMutationId: String!
}

input UpdateBais {
  id: ID!
  name: String
  cookingOnDaysId: ID
  cookingOnDays: BaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDays!]
}

input UpdateBaisInput {
  id: ID!
  name: String
  cookingOnDaysId: ID
  cookingOnDays: BaiscookingOnDaysDays
  eatingOnDaysIds: [ID!]
  eatingOnDays: [BaiseatingOnDaysDays!]
  clientMutationId: String!
}

type UpdateBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  bais: Bais
  edge: BaisEdge
  cookingOnDays: Days
}

input UpdateDays {
  date: DateTime
  id: ID!
  cookingIds: [ID!]
  cooking: [DayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBais!]
}

input UpdateDaysInput {
  date: DateTime
  id: ID!
  cookingIds: [ID!]
  cooking: [DayscookingBais!]
  eatingIds: [ID!]
  eating: [DayseatingBais!]
  clientMutationId: String!
}

type UpdateDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  days: Days
  edge: DaysEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateBaisInput {
  update: UpdateBais!
  create: CreateBais!
  clientMutationId: String!
}

type UpdateOrCreateBaisPayload {
  viewer: Viewer!
  clientMutationId: String!
  bais: Bais
  edge: BaisEdge
  cookingOnDays: Days
}

input UpdateOrCreateDaysInput {
  update: UpdateDays!
  create: CreateDays!
  clientMutationId: String!
}

type UpdateOrCreateDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  days: Days
  edge: DaysEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreatePostInput {
  update: UpdatePost!
  create: CreatePost!
  clientMutationId: String!
}

type UpdateOrCreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdatePost {
  description: String
  id: ID!
  imageUrl: String
}

input UpdatePostInput {
  description: String
  id: ID!
  imageUrl: String
  clientMutationId: String!
}

type UpdatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allBaises(filter: BaisFilter, orderBy: BaisOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BaisConnection!
  allDayses(filter: DaysFilter, orderBy: DaysOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): DaysConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allPosts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Bais(id: ID): Bais
  Days(date: DateTime, id: ID): Days
  File(id: ID, secret: String, url: String): File
  Post(id: ID): Post
  User(id: ID): User
  id: ID!
}
